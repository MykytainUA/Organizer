package server.server;

import java.io.*;
import java.net.*;

import shared.messages.*;


public class Server {
	private final short port; // Port that is listening
	private ServerSocket serverSocket; // Server socket that listens for requests
	private Socket socket; // Socket that creates connection between client and server via streams
	private Message message; // Wrapper class for info transferred between client and server
	//private DatabaseManager databaseManager;
	
	/**
	 * Creates a server that listens on port and IP which specified in SharedOptions class
	 * @param port a port that this server will be attached to 
	 */
	public Server(short port) {
		System.out.println("SERVER:Trying to launch a server..."); 
		this.port = port; // Set port
		
		try {
			this.setServerSocket(new ServerSocket(this.port)); // Create ServerSocket
			System.out.println("SERVER:Server socket created successfully");
			
		} catch (IOException e) {
			System.out.println("SERVER:Could not create a server socket!!!");
			System.out.println(e);
			
		}

	}
	
	private ServerSocket getServerSocket() {
		return serverSocket;
	}

	private void setServerSocket(ServerSocket serverSocket) {
		this.serverSocket = serverSocket;
	}

	private Socket getSocket() {
		return socket;
	}

	private void setSocket(Socket socket) {
		this.socket = socket;
	}

	public Message getMessage() {
		return message;
	}

	public void setMessage(Message message) {
		this.message = message;
	}

	/**
	 * Here server waits for next request
	 * when request received execution continues
	 */
	public void waitForNextRequest() {
		
		try {
			this.setSocket(this.getServerSocket().accept()); // Listen for request and continue execution when request comes
			
		} catch (IOException e) {
			System.out.println(e);
		} 
	}
	
	/**
	 * When request received execute if possible
	 */
	public void executeRequest() {
		try {
			// Get object from client through sockets getInputStream() and ObjectInputStream
			ObjectInputStream objectInputStream = new ObjectInputStream(this.getSocket().getInputStream());
			this.setMessage((Message) objectInputStream.readObject()); // Deserialize object
			//
			
			// Routing and executing request
			if(this.getMessage() instanceof CheckConnectionMessage) {
				System.out.println("CheckConnectionMessage received");
				CheckConnectionMessage message = (CheckConnectionMessage) this.getMessage();
				message.success();
				this.setMessage(message);
				
			} else if (this.getMessage() instanceof SignInMessage) {
				System.out.println("SignInMessage received");
				
			} else if (this.getMessage() instanceof SignUpMessage) {
				System.out.println("SignUpMessage received");
			}
			//
			
			// Sending answer to request back to client through sockets getOutputStream() and ObjectOutputStream
			ObjectOutputStream objectOutputStream = new ObjectOutputStream(this.getSocket().getOutputStream());
			objectOutputStream.writeObject(this.getMessage()); // Serializing object
			objectOutputStream.flush(); // Send stream
			//
			
			// Close streams
			objectInputStream.close();
			objectOutputStream.close();
			this.getSocket().close();
			//
			
		} 
		catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException e) {
			System.out.println("Error during execution request!!!");
			System.out.println(e);
		}
			
	}
}
